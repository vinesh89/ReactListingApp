{"version":3,"sources":["components/UIComponents/list/List.js","components/UIComponents/list/ListItem.js","store/selectors/accounts.js","store/selectors/transactions.js","store/actions/accounts.js","utils/constants.js","components/errorHandler/ErrorHandler.js","components/transactions/TransactionListing.js","pages/TransactionListingPage.js"],"names":["List","Styled","ul","ListItem","li","getAccount","state","accounts","getAccountErrorStatus","error","getAccountErrorResponse","errorResponse","getTransactions","transactions","getTransactionItemByID","id","filter","item","getTransactionsErrorStatus","getTransactionsErrorResponse","fetchAccounts","dispatch","axios","get","then","response","data","type","actionTypes","catch","fetchAccountsFailed","fetchTransactions","accountId","fetchTransactionsFailed","APIErrorStatusCodes","Set","ErrorContainer","ErrorHandler","props","status","errorStatus","errorMessage","has","title","strings","could_not_load_title","body","could_not_load_body","network_error_title","network_error_body","TransactionListing","data-testid","listItems","from","map","listItem","onClick","getFormattedDate","transaction_date","transaction_processed","amount","withRouter","useDispatch","transactionsList","useSelector","getTransactionsList","useCallback","actions","useEffect","location","history","push","pathname"],"mappings":"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","file":"static/js/5.10ed6bb1.chunk.js","sourcesContent":["import Styled from 'styled-components';\n\nexport const List = Styled.ul`\n    margin: auto;    \n    width: 85%;\n    padding: 0px;\n    @media (max-width: 500px) {\n        width: 100%;\n    }\n`","import Styled from 'styled-components';\n\nexport const ListItem = Styled.li`\n    padding: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    list-style-type: none;\n    &:hover {\n        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n    }\n`","export const getAccount = state => state.accounts.accounts;\n\nexport const getAccountErrorStatus = state => state.accounts.error;\n\nexport const getAccountErrorResponse = state => state.accounts.errorResponse;","export const getTransactions = state => state.accounts.transactions;\n\nexport const getTransactionItemByID = (id) => (state) => state.accounts.transactions.filter(item => item.id === id)[0];\n\nexport const getTransactionsErrorStatus = state => state.accounts.error;\n\nexport const getTransactionsErrorResponse = state => state.accounts.errorResponse;","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setAccounts = (accounts) => {\n    return {\n        type: actionTypes.SET_ACCOUNTS,\n        accounts\n    }\n}\n\nexport const fetchAccountsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_ACCOUNTS_FAILED,\n        error\n    }\n}\n\nexport const fetchAccounts = () => {\n    return dispatch => {\n        axios.get( 'accounts.json' )\n            .then( response => {\n               dispatch(setAccounts(response.data));\n            } )\n            .catch( error => {\n                dispatch(fetchAccountsFailed(error));\n            } );\n    };\n}\n\nexport const setTransactions = (transactions) => {\n    return {\n        type: actionTypes.SET_TRANSACTIONS,\n        transactions\n    }\n}\n\nexport const fetchTransactionsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_TRANSACTIONS_FAILED,\n        error\n    }\n}\n\nexport const fetchTransactions = (accountId) => {\n    return dispatch => {\n        axios.get(`transactions-${accountId}.json`)\n            .then( response => {\n                dispatch(setTransactions(response.data));\n            })\n            .catch((error) => {\n                dispatch(fetchTransactionsFailed(error));               \n            });\n    };\n}","import strings from '../localization/en.json';\nexport const APIErrorStatusCodes = new Set([\n\t400, //Bad Request\n\t404, //Not Found,\n\t405, //Method Not Allowed\n\t406, //Not Acceptable\n\t408, //Request Timeout \n\t500, //Internal Server Error\n\t501, //Not Implemented\n\t502, //Bad Gateway\n\t503, //Service Unavailable\n\t504, //Gateway Timeout\n]);\n\nexport const ErrorMessageForErrorStatus = (status) => {\n    if (APIErrorStatusCodes.has(status)) {\n        return {\n            title: strings.could_not_load_title,\n            body: strings.could_not_load_body\n        }\n    }\n\n    return {\n        title: strings.network_error_title,\n        body: strings.network_error_body\n    }\n}","import React from 'react';\nimport { ErrorMessageForErrorStatus } from '../../utils/constants';\nimport { ListItem } from '../UIComponents/list';\nimport Styled from 'styled-components';\n\nconst ErrorContainer = Styled(ListItem)`\n  margin: auto;\n  width: 60%;\n  @media (max-width: 700px) {\n    width: 90%;\n  }\n`\n\n\nconst ErrorHandler = (props) => {\n    const { errorStatus } = props;\n    const errorMessage = ErrorMessageForErrorStatus(errorStatus);\n\n    return(\n        <ErrorContainer>\n            <h2>{errorMessage.title}</h2>\n            <h4>{errorMessage.body}</h4>\n        </ErrorContainer>\n    )\n}\n\nexport default ErrorHandler;","import React from 'react';\nimport { List, ListItem } from '../UIComponents/list';\nimport { getFormattedDate } from '../../utils/utility';\n\nconst TransactionListing = (props) => {\n    return(\n        <List data-testid=\"transaction-list\">\n            <h2>{props.listItems[0].from}</h2>\n            {props.listItems.map((listItem) => \n                <ListItem data-testid=\"transaction-list-item\" key={listItem.id} onClick={() => props.onClick(listItem)}>\n                    <div>\n                        <h3>Transaction Date</h3>\n                        <h4>{getFormattedDate(listItem.transaction_date)}</h4>\n                        <h3>Transaction Processed</h3>\n                        <h4>{listItem.transaction_processed ? \"Yes\" : \"No\"}</h4>\n                        <h3>Ammount</h3>\n                        <h4>{listItem.amount}</h4>\n                    </div>\n                </ListItem>\n            )}\n        </List>    \n    );\n}\n\nexport default TransactionListing;","import React, { useEffect, useCallback } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../store/actions/index';\nimport TransactionList from '../components/transactions/TransactionListing';\nimport ErrorHandler from '../components/errorHandler/ErrorHandler';\nimport { getTransactions, getTransactionsErrorStatus, getTransactionsErrorResponse } from '../store/selectors';\n\nconst TransactionListingPage = (props) => {\n    const dispatch = useDispatch();\n    const transactionsList = useSelector(getTransactions);\n    const errorStatus = useSelector(getTransactionsErrorStatus);\n    const errorResponse = useSelector(getTransactionsErrorResponse);\n    const getTransactionsList = useCallback((id) => \n        dispatch(actions.fetchTransactions(id)), [dispatch]\n    );\n\n    useEffect(() => {\n        const { id } = props.location.state;\n        getTransactionsList(id);\n    }, [getTransactionsList]);\n\n    const handleItemClick = (item) => {\n        props.history.push({\n            pathname: `/transactionDetail/${item.id}`,\n            state: item\n        })\n    }\n\n    let transactions = <h1>Loading Transactions ...</h1>;\n\n    if(errorStatus) {\n        transactions = (\n            <ErrorHandler errorStatus={errorResponse.response.status} />\n        )\n    }\n\n    if (transactionsList) {\n        transactions = <TransactionList listItems={transactionsList} onClick={handleItemClick}/>\n    }\n\n    return(\n        <div>\n            {transactions}\n        </div>\n    )\n}\n\nexport default withRouter(TransactionListingPage);"],"sourceRoot":""}
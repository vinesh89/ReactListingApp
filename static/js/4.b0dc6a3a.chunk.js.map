{"version":3,"sources":["components/UIComponents/list/List.js","components/UIComponents/list/ListItem.js","store/selectors/accounts.js","store/selectors/transactions.js","store/actions/accounts.js","utils/constants.js","components/errorHandler/ErrorHandler.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/accounts/AccountsListing.js","pages/AccountsListingPage.js"],"names":["List","Styled","ul","ListItem","li","getAccount","state","accounts","getAccountErrorStatus","error","getAccountErrorResponse","errorResponse","getTransactions","transactions","getTransactionItemByID","id","filter","item","getTransactionsErrorStatus","getTransactionsErrorResponse","fetchAccounts","dispatch","axios","get","then","response","data","type","actionTypes","catch","fetchAccountsFailed","fetchTransactions","accountId","fetchTransactionsFailed","APIErrorStatusCodes","Set","ErrorContainer","ErrorHandler","props","status","errorStatus","errorMessage","has","title","strings","could_not_load_title","body","could_not_load_body","network_error_title","network_error_body","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","AccountListing","data-testid","listItems","map","listItem","onClick","account_name","account_type","balance","currency","is_active","withRouter","history","useDispatch","accountsList","useSelector","getAccountsList","useCallback","actions","useEffect","handleItemClick","push","pathname"],"mappings":"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","file":"static/js/4.b0dc6a3a.chunk.js","sourcesContent":["import Styled from 'styled-components';\n\nexport const List = Styled.ul`\n    margin: auto;    \n    width: 85%;\n    padding: 0px;\n    @media (max-width: 500px) {\n        width: 100%;\n    }\n`","import Styled from 'styled-components';\n\nexport const ListItem = Styled.li`\n    padding: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    list-style-type: none;\n    &:hover {\n        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n    }\n`","export const getAccount = state => state.accounts.accounts;\n\nexport const getAccountErrorStatus = state => state.accounts.error;\n\nexport const getAccountErrorResponse = state => state.accounts.errorResponse;","export const getTransactions = state => state.accounts.transactions;\n\nexport const getTransactionItemByID = (id) => (state) => state.accounts.transactions.filter(item => item.id == id)[0];\n\nexport const getTransactionsErrorStatus = state => state.accounts.error;\n\nexport const getTransactionsErrorResponse = state => state.accounts.errorResponse;","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setAccounts = (accounts) => {\n    return {\n        type: actionTypes.SET_ACCOUNTS,\n        accounts\n    }\n}\n\nexport const fetchAccountsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_ACCOUNTS_FAILED,\n        error\n    }\n}\n\nexport const fetchAccounts = () => {\n    return dispatch => {\n        axios.get( 'accounts.json' )\n            .then( response => {\n               dispatch(setAccounts(response.data));\n            } )\n            .catch( error => {\n                dispatch(fetchAccountsFailed(error));\n            } );\n    };\n}\n\nexport const setTransactions = (transactions) => {\n    return {\n        type: actionTypes.SET_TRANSACTIONS,\n        transactions\n    }\n}\n\nexport const fetchTransactionsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_TRANSACTIONS_FAILED,\n        error\n    }\n}\n\nexport const fetchTransactions = (accountId) => {\n    return dispatch => {\n        axios.get(`transactions-${accountId}.json`)\n            .then( response => {\n                dispatch(setTransactions(response.data));\n            })\n            .catch((error) => {\n                dispatch(fetchTransactionsFailed(error));               \n            });\n    };\n}","import strings from '../localization/en.json';\nexport const APIErrorStatusCodes = new Set([\n\t400, //Bad Request\n\t404, //Not Found,\n\t405, //Method Not Allowed\n\t406, //Not Acceptable\n\t408, //Request Timeout \n\t500, //Internal Server Error\n\t501, //Not Implemented\n\t502, //Bad Gateway\n\t503, //Service Unavailable\n\t504, //Gateway Timeout\n]);\n\nexport const ErrorMessageForErrorStatus = (status) => {\n    if (APIErrorStatusCodes.has(status)) {\n        return {\n            title: strings.could_not_load_title,\n            body: strings.could_not_load_body\n        }\n    }\n\n    return {\n        title: strings.network_error_title,\n        body: strings.network_error_body\n    }\n}","import React from 'react';\nimport { ErrorMessageForErrorStatus } from '../../utils/constants';\nimport { ListItem } from '../UIComponents/list';\nimport Styled from 'styled-components';\n\nconst ErrorContainer = Styled(ListItem)`\n  margin: auto;\n  width: 60%;\n  @media (max-width: 700px) {\n    width: 90%;\n  }\n`\n\n\nconst ErrorHandler = (props) => {\n    const { errorStatus } = props;\n    const errorMessage = ErrorMessageForErrorStatus(errorStatus);\n\n    return(\n        <ErrorContainer>\n            <h2>{errorMessage.title}</h2>\n            <h4>{errorMessage.body}</h4>\n        </ErrorContainer>\n    )\n}\n\nexport default ErrorHandler;","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\nimport { List, ListItem } from '../UIComponents/list';\n\nconst AccountListing = (props) => {\n    return(\n        <List data-testid=\"accounts-list\">\n            {props.listItems.map((listItem) => \n                <ListItem data-testid=\"accounts-list-item\" key={listItem.id} onClick={() => props.onClick(listItem)}>\n                    <div>\n                        <h2>{listItem.account_name}</h2>\n                        <h3>Account Type - {listItem.account_type}</h3>\n                        <h3>Balance - ${listItem.balance} {listItem.currency}</h3>\n                        <h4>Account Status - {listItem.is_active ? \"Active\" : \"InActive\"}</h4>\n                    </div>\n                </ListItem>\n            )}\n        </List>    \n    );\n}\n\nexport default AccountListing;","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport * as actions from '../store/actions/index';\nimport AccountList from '../components/accounts/AccountsListing';\nimport ErrorHandler from '../components/errorHandler/ErrorHandler';\nimport { getAccount, getAccountErrorStatus, getAccountErrorResponse } from '../store/selectors'\n\nconst AccountsListingPage = ({history, ...props}) => {\n\n    const dispatch = useDispatch();\n    const accountsList = useSelector(getAccount);\n    const errorStatus = useSelector(getAccountErrorStatus);\n    const errorResponse = useSelector(getAccountErrorResponse);\n    const getAccountsList = useCallback(() => \n        dispatch(actions.fetchAccounts()), [dispatch]\n    );\n\n    useEffect(() => {\n        getAccountsList();\n    }, [getAccountsList]);\n\n    const handleItemClick = (item) => {\n        history.push({\n            pathname: \"/transaction\",\n            state: item\n        });\n    }\n\n    const renderAccountsList = () => {\n        if(errorStatus) {\n            return(\n                <ErrorHandler errorStatus={errorResponse.response.status} />\n            )\n        }\n\n        if(accountsList) {\n            return(\n                <AccountList listItems={accountsList} onClick={handleItemClick}/>\n            );\n        }\n\n        return <h1>Loading Accounts List ...</h1>\n    }\n\n    return(\n        <>\n            {renderAccountsList()}\n        </>\n    )\n}\n\nexport default withRouter(AccountsListingPage);"],"sourceRoot":""}
{"version":3,"sources":["components/UIComponents/list/List.js","components/UIComponents/list/ListItem.js","store/actions/accounts.js","utils/constants.js","components/errorHandler/ErrorHandler.js","components/transactions/TransactionListing.js","pages/TransactionListingPage.js"],"names":["List","Styled","ul","ListItem","li","fetchAccounts","dispatch","axios","get","then","response","accounts","data","type","actionTypes","catch","error","fetchAccountsFailed","fetchTransactions","accountId","transactions","fetchTransactionsFailed","APIErrorStatusCodes","Set","ErrorContainer","ErrorHandler","props","status","errorStatus","errorMessage","has","title","strings","could_not_load_title","body","could_not_load_body","network_error_title","network_error_body","TransactionListing","data-testid","listItems","from","map","listItem","onClick","getFormattedDate","transaction_date","transaction_processed","amount","id","withRouter","useDispatch","transactionsList","useSelector","state","errorResponse","getTransactionsList","useCallback","actions","useEffect","location","item","history","push","pathname"],"mappings":"+MAEaA,EAAOC,IAAOC,GAAV,qJCAJC,EAAWF,IAAOG,GAAV,2N,kcCeRC,EAAgB,WACzB,OAAO,SAAAC,GACHC,IAAMC,IAAK,iBACNC,MAAM,SAAAC,GAjBQ,IAACC,EAkBbL,GAlBaK,EAkBQD,EAASE,KAjBlC,CACHC,KAAMC,IACNH,iBAiBKI,OAAO,SAAAC,GACJV,EAdmB,SAACU,GAChC,MAAO,CACHH,KAAMC,IACNE,SAWiBC,CAAoBD,SAmBhCE,EAAoB,SAACC,GAC9B,OAAO,SAAAb,GACHC,IAAMC,IAAN,uBAA0BW,EAA1B,UACKV,MAAM,SAAAC,GAjBY,IAACU,EAkBhBd,GAlBgBc,EAkBSV,EAASE,KAjBvC,CACHC,KAAMC,IACNM,qBAiBKL,OAAM,SAACC,GACJV,EAduB,SAACU,GACpC,MAAO,CACHH,KAAMC,IACNE,SAWiBK,CAAwBL,U,6DCjDpCM,EAAsB,IAAIC,IAAI,CAC1C,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,M,uBCNKC,EAAiBvB,YAAOE,IAAPF,CAAH,iHAqBLwB,IAZM,SAACC,GAAW,IDAUC,ECC/BC,EAAgBF,EAAhBE,YACFC,GDFiCF,ECESC,EDD5CN,EAAoBQ,IAAIH,GACjB,CACHI,MAAOC,EAAQC,qBACfC,KAAMF,EAAQG,qBAIf,CACHJ,MAAOC,EAAQI,oBACfF,KAAMF,EAAQK,qBCNlB,OACI,eAACb,EAAD,WACI,6BAAKK,EAAaE,QAClB,6BAAKF,EAAaK,Y,gGCGfI,EApBY,SAACZ,GACxB,OACI,eAAC,IAAD,CAAMa,cAAY,mBAAlB,UACI,6BAAKb,EAAMc,UAAU,GAAGC,OACvBf,EAAMc,UAAUE,KAAI,SAACC,GAAD,OACjB,cAAC,IAAD,CAAUJ,cAAY,wBAA0CK,QAAS,kBAAMlB,EAAMkB,QAAQD,IAA7F,SACI,gCACI,kDACA,6BAAKE,YAAiBF,EAASG,oBAC/B,uDACA,6BAAKH,EAASI,sBAAwB,MAAQ,OAC9C,yCACA,6BAAKJ,EAASK,aAP6BL,EAASM,W,QCsC7DC,uBAxCgB,SAACxB,GAC5B,IAAMpB,EAAW6C,cACXC,EAAmBC,aAAY,SAAAC,GAAK,OAAIA,EAAM3C,SAASS,gBACvDQ,EAAcyB,aAAY,SAAAC,GAAK,OAAIA,EAAM3C,SAASK,SAClDuC,EAAgBF,aAAY,SAAAC,GAAK,OAAIA,EAAM3C,SAAS4C,iBACpDC,EAAsBC,uBAAY,SAACR,GAAD,OACpC3C,EAASoD,IAA0BT,MAAM,CAAC3C,IAG9CqD,qBAAU,WAAO,IACLV,EAAOvB,EAAMkC,SAASN,MAAtBL,GACRO,EAAoBP,KACrB,CAACO,IAEJ,IAOIpC,EAAe,0DAYnB,OAVGQ,IACCR,EACI,cAACK,EAAA,EAAD,CAAcG,YAAa2B,EAAc7C,SAASiB,UAItDyB,IACAhC,EAAe,cAAC,EAAD,CAAiBoB,UAAWY,EAAkBR,QAhBzC,SAACiB,GACrBnC,EAAMoC,QAAQC,KAAK,CACfC,SAAU,qBACVV,MAAOO,QAiBX,8BACKzC","file":"static/js/5.0d5da8b6.chunk.js","sourcesContent":["import Styled from 'styled-components';\n\nexport const List = Styled.ul`\n    margin: auto;    \n    width: 85%;\n    padding: 0px;\n    @media (max-width: 500px) {\n        width: 100%;\n    }\n`","import Styled from 'styled-components';\n\nexport const ListItem = Styled.li`\n    padding: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    list-style-type: none;\n    &:hover {\n        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n    }\n`","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setAccounts = (accounts) => {\n    return {\n        type: actionTypes.SET_ACCOUNTS,\n        accounts\n    }\n}\n\nexport const fetchAccountsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_ACCOUNTS_FAILED,\n        error\n    }\n}\n\nexport const fetchAccounts = () => {\n    return dispatch => {\n        axios.get( 'accounts.json' )\n            .then( response => {\n               dispatch(setAccounts(response.data));\n            } )\n            .catch( error => {\n                dispatch(fetchAccountsFailed(error));\n            } );\n    };\n}\n\nexport const setTransactions = (transactions) => {\n    return {\n        type: actionTypes.SET_TRANSACTIONS,\n        transactions\n    }\n}\n\nexport const fetchTransactionsFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_TRANSACTIONS_FAILED,\n        error\n    }\n}\n\nexport const fetchTransactions = (accountId) => {\n    return dispatch => {\n        axios.get(`transactions-${accountId}.json`)\n            .then( response => {\n                dispatch(setTransactions(response.data));\n            })\n            .catch((error) => {\n                dispatch(fetchTransactionsFailed(error));               \n            });\n    };\n}","import strings from '../localization/en.json';\nexport const APIErrorStatusCodes = new Set([\n\t400, //Bad Request\n\t404, //Not Found,\n\t405, //Method Not Allowed\n\t406, //Not Acceptable\n\t408, //Request Timeout \n\t500, //Internal Server Error\n\t501, //Not Implemented\n\t502, //Bad Gateway\n\t503, //Service Unavailable\n\t504, //Gateway Timeout\n]);\n\nexport const ErrorMessageForErrorStatus = (status) => {\n    if (APIErrorStatusCodes.has(status)) {\n        return {\n            title: strings.could_not_load_title,\n            body: strings.could_not_load_body\n        }\n    }\n\n    return {\n        title: strings.network_error_title,\n        body: strings.network_error_body\n    }\n}","import React from 'react';\nimport { ErrorMessageForErrorStatus } from '../../utils/constants';\nimport { ListItem } from '../UIComponents/list';\nimport Styled from 'styled-components';\n\nconst ErrorContainer = Styled(ListItem)`\n  margin: auto;\n  width: 60%;\n  @media (max-width: 700px) {\n    width: 90%;\n  }\n`\n\n\nconst ErrorHandler = (props) => {\n    const { errorStatus } = props;\n    const errorMessage = ErrorMessageForErrorStatus(errorStatus);\n\n    return(\n        <ErrorContainer>\n            <h2>{errorMessage.title}</h2>\n            <h4>{errorMessage.body}</h4>\n        </ErrorContainer>\n    )\n}\n\nexport default ErrorHandler;","import React from 'react';\nimport { List, ListItem } from '../UIComponents/list';\nimport { getFormattedDate } from '../../utils/utility';\n\nconst TransactionListing = (props) => {\n    return(\n        <List data-testid=\"transaction-list\">\n            <h2>{props.listItems[0].from}</h2>\n            {props.listItems.map((listItem) => \n                <ListItem data-testid=\"transaction-list-item\" key={listItem.id} onClick={() => props.onClick(listItem)}>\n                    <div>\n                        <h3>Transaction Date</h3>\n                        <h4>{getFormattedDate(listItem.transaction_date)}</h4>\n                        <h3>Transaction Processed</h3>\n                        <h4>{listItem.transaction_processed ? \"Yes\" : \"No\"}</h4>\n                        <h3>Ammount</h3>\n                        <h4>{listItem.amount}</h4>\n                    </div>\n                </ListItem>\n            )}\n        </List>    \n    );\n}\n\nexport default TransactionListing;","import React, { useEffect, useCallback } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../store/actions/index';\nimport TransactionList from '../components/transactions/TransactionListing';\nimport ErrorHandler from '../components/errorHandler/ErrorHandler';\n\nconst TransactionListingPage = (props) => {\n    const dispatch = useDispatch();\n    const transactionsList = useSelector(state => state.accounts.transactions);\n    const errorStatus = useSelector(state => state.accounts.error);\n    const errorResponse = useSelector(state => state.accounts.errorResponse);\n    const getTransactionsList = useCallback((id) => \n        dispatch(actions.fetchTransactions(id)), [dispatch]\n    );\n\n    useEffect(() => {\n        const { id } = props.location.state;\n        getTransactionsList(id);\n    }, [getTransactionsList]);\n\n    const handleItemClick = (item) => {\n        props.history.push({\n            pathname: \"/transactionDetail\",\n            state: item\n        })\n    }\n\n    let transactions = <h1>Loading Transactions ...</h1>;\n\n    if(errorStatus) {\n        transactions = (\n            <ErrorHandler errorStatus={errorResponse.response.status} />\n        )\n    }\n\n    if (transactionsList) {\n        transactions = <TransactionList listItems={transactionsList} onClick={handleItemClick}/>\n    }\n\n    return(\n        <div>\n            {transactions}\n        </div>\n    )\n}\n\nexport default withRouter(TransactionListingPage);"],"sourceRoot":""}